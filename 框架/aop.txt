Spring-AOP
AOP简称面向界面编程
在程序中处理如事务，日志，权限等（Struts2中的拦截器设置就是基于AOP的思想）
AOP的基本概念
1）Aspect(切面)：通常是一个类，里面可以定义切入点和通知（何为通知）
2）JoinPoint(连接点)：程序执行过程中明确的点，一般是方法的调用
3）Advice(通知)：AOP在特定的切入点上执行的增强处理，有before,after，AfterReturning,afterThrowing,around
4）Pointcut（切入点）：带中通知的连接点，在程序中只要体现为书写切入点表达式
5）AOP代理：AOP框架创建的对象，代理就是目标对象的加强

基于注解的AOP配置方式
1）启用@Asject支持
在application-context.xml中添加
<aop:aspectj-autoproxy/>
<aop:aspectj-autoproxy proxy-target-class="true"/>
proxy-target-class="true" 与proxy-target-class="false"的区别：
proxy-target-class的设置决定是基于接口还是基于类的代理被创建，如果设置为true那么基于类的代理将其作用
如果是false或省略，那么是标准的基于jdk接口的代理
高版本Spring会自动判断使用哪种代理方式


通知类型
1）before:在目标方法调用之前做增强处理，@Before只需要指定切入点表达式即可
2）AfterReturning:在目标方法正常完成后做增强，@AfterReturning除了指定切入点表达式后还可指定一个返回值形参名
returning,代表目标方法的的返回值
3）AfterThrowing:主要用于程序中未处理的异常，
4）After:在目标方法完成之后做增强，无论目标方法是否执行成功
5）Around：环绕通知，在目标方法完成前后做增强处理